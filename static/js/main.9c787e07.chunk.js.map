{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9c787e07.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/\">{props.aboutText}</a>\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n            </form> */}\r\n          <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: \"TextUtils\",\r\n  aboutText: \"About\"\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"ON change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleUpClick = () => {\r\n        // console.log(\"You clicked\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = () => {\r\n        // console.log(\"You clicked\");\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase!\", \"success\");\r\n    }\r\n\r\n    const handleClickClear = () => {\r\n        // console.log(\"You clicked\");\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared!\", \"success\");\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        let text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra spaces removed!\", \"success\");\r\n    }\r\n\r\n\r\n\r\n    const [text, setText] = useState(\"\");\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container my-3 \" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n                <h1 style={{color: props.mode==='dark'?'white':'black'}}>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#13466e':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-outline-success bg-dark mx-1\" onClick={handleUpClick}>Convert lower To Upper case</button>\r\n                <button className=\"btn btn-outline-success bg-dark mx-1\" onClick={handleLoClick}>Convert Upper To Lower case</button>\r\n                <button className=\"btn btn-outline-success bg-dark mx-1\" onClick={handleClickClear}>Clear Text</button>\r\n                <button className=\"btn btn-outline-success bg-dark mx-1\" onClick={handleCopy}>Copy Text</button>\r\n                <button className=\"btn btn-outline-success bg-dark mx-1\" onClick={handleExtraSpaces}>Remove extra spaces</button>\r\n            </div>\r\n\r\n            <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n                <h2>Your Text Summary</h2>\r\n                <p><b>{text.split(\" \").length}</b> Words and <b>{text.length} </b> Characters</p>\r\n\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:\"Nothing to preview!\"}</p>\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        //<div style={{height: '50px'}}>\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n           <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \r\n        </div>\r\n        //</div>\r\n    )\r\n}\r\n\r\nexport default Alert","// import logo from './logo.svg';\nimport './App.css';\nimport React, { useState } from 'react'\n\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nfunction App() {\n\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  }\n\n  return (\n\n    <>\n\n      {/* <Navbar title=\"TextUtils\" aboutText=\"About us\"/>  */}\n      <Navbar mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container\">\n        <TextForm heading=\"Enter Your Text for Anaylize Below\" mode={mode} showAlert={showAlert} />\n        {/* <About/> */}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}